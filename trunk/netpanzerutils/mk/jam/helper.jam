#============================================================================
# Helper rules
#============================================================================

##  IncludeDir [target : ] directories
##    Description: Is used to specify the location of header files for a
##    target or the whole project if no target is given.
##    This rule will automatically generate the -I compiler flags and makes
##    sure the dependency scanner is able to locate your header files. The
##    directories are relative to the current subdir specified with the SubDir
##    rule.
##    Implementation: The directories are simply added to the HDRS variable
##    which is respected by all jam rules.
rule IncludeDir
{
  if $(>)
  {
    local o ;
    for o in $($(<)_OBJECTS)
    {
	CCHDRS on $(o) += [ FIncludes $(SUBDIR)/$(>) ] ;
    }
  }
  else
  {
    # don't fail when used in Jamrule where SUBDIR isn't defined yet.
    if $(SUBDIR)
    {
      HDRS += $(SUBDIR)/$(<) ;
    }
    else
    {
      HDRS += $(<) ;
    }
  }   
}

##  SearchSubdir subdirectories
##    Description: Tells jam where to find additional sourcefiles. This is
##    useful when your target has files in subdirectories. In this case set
##    SearchSubdir to these subdirectories and just mention the sourcefiles
##    without path in your other rules.
##    Implementation: This rule sets the SEARCH_SOURCE variable to
##    $(SUBDIR)/subdir, so this rule will only work with rules which respect
##    the SEARCH_SOURCE variable. (All CS rules do so.)
rule SearchSubdir
{
  SEARCH_SOURCE += $(SUBDIR)/$(<) ;
}

##  Wildcard [ dir : ] patterns
##    Create a list of files in a directory which match the pattern. You can
##    optionally specify a subdirectory. The files will be returned with
##    stripped pathnames. The difference from GLOB is that this rule respects
##    subdirectories which may have been entered with the SubDir rule.
rule Wildcard
{
  local files dir wildcards ;
  
  # Is a directory given?
  if $(>) {
    dir = $(<)/ ;
    wildcards = $(>) ;
  } else {
    dir = "" ;
    wildcards = $(<) ;
  }

  files = [ GLOB [ FDirName $(SUBDIR) $(dir) ] : $(wildcards) ] ;

  return $(files:BS) ;
}

rule WildcardPath
{
  local files dir wildcards ;
  
  # Is a directory given?
  if $(>) {
    dir = $(<)/ ;
    wildcards = $(>) ;
  } else {
    dir = "" ;
    wildcards = $(<) ;
  }

  files = [ GLOB [ FDirName $(SUBDIR) $(dir) ] : $(wildcards) ] ;

  return $(dir)$(files:BS) ;
}

##  Prefix list : prefix
##    Adds a prefix to a all elements in list.
rule Prefix
{
  return $(>)$(<) ;
}

if $(JAMVERSION) >= 2.5
{

##  IsElem element : list
##    Returns "true" if the elemnt is in the list. Otherwise nothing is
##    returned.
rule IsElem
{
  local i ;

  for i in $(>)
  {
    if $(i) = $(<)
    {
      return "true" ;
    }
  }

  return ;
}

}
else
{

# jam<2.4's return statement doesn't exit the function
rule IsElem
{
  local i result ;

  for i in $(>)
  {
    if $(i) = $(<)
    {
      result = "true" ;
      $(>) = ;
    }
  }

  return $(result) ;
}

}

##  Filter list : filter
##    Returns the list without the words contained in filter.
rule Filter
{
  local i result ;

  for i in $(<)
  {
    if ! [ IsElem $(i) : $(>) ]
    {
      result += $(i) ;
    }
  }

  return $(result) ;
}

##  RemoveDups list
##    Removes duplicates in the list (this function tries to preserve the list
##    order)
rule RemoveDups
{
  local i result ;

  for i in $(<)
  {
    if ! [ IsElem §(i) : $(result) ]
    {
      result += $(i) ;
    }  
  }

  return $(result) ;
} 

##  GetVar argument
##    Simply returns the value of the variable with name argument.
##    This is useful to query on target variables:
##       bla = [ on TARGET GetVar CFlags ] ;
rule GetVar
{
  return $($(<)) ;
}

##  Copy target : source
##    Copy source file to target.
actions Copy
{
  $(CP) $(>) $(<)
}

actions ignore Move
{
  $(MV) $(>) $(<)
}

